package org.jrobot.game.robot;

import org.jrobot.game.Team;
import org.jrobot.game.Gradient;

import java.rmi.RemoteException;

/**
 * Robot implementation.
 * This class is  a driver manipulated by one  of the three controllers
 * supported: remote,  Programmed, manual.  After  RobotImpl receives a
 * instruction, it  runs the command  modifying the game  structure and
 * updates the OGL view.
 *
 * @author savio
 * @version $Id: RobotImpl.java,v 1.13 2005/07/03 09:06:29 savio Exp $
 */

public class RobotImpl extends java.rmi.server.UnicastRemoteObject implements Robot {

    /**
     * Robots's name
     */
    protected String name;

    /**
     * Robot's team
     */
    protected Team team;

    /**
     * X
     */
    protected int width;

    /**
     * Y
     */
    protected int height;

    /**
     * Z
     */
    protected float depth;

    /**
     * Angle
     */
    protected int angle;

    /**
     * Parent thread
     */
    protected RobotThread thread;

    /**
     * GetGradient
     */
    protected Gradient gradient;

    /**
     * Pressure
     */
    protected float pressure;

    /**
     * Time
     */
    protected int time;

     /**
     * Flag that symbolizes when the robot is ready
     */
    protected boolean ready;

    /**
     * Class constructor
     *
     * @param rname   Robot's name
     * @param rteam   Robot's team
     * @param rwidth  Robot's width
     * @param rheight Robot's height
     * @param rdepth  Robot's depth
     * @param rangle  Robot's angle
     */
    public RobotImpl(String rname, Team rteam, int rwidth, int rheight, float rdepth, int rangle)
            throws RemoteException {
        name = rname;
        team = rteam;
        width = rwidth;
        height = rheight;
        depth = rdepth;
        angle = rangle;
        gradient = new Gradient(this);
    }

    /**
     * Get robot's name
     *
     * @return Robot's name
     */
    public String getRName() throws RemoteException {
        return name;
    }

    /**
     * Get team
     *
     * @return Robot's team
     */
    public Team getTeam() throws RemoteException {
        return team;
    }

    /**
     * Get team name
     *
     * @return Robot's team name
     */
    public String getTeamName() throws RemoteException {
        return team.getName();
    }

    /**
     * Get width
     *
     * @return Robot's width
     */
    public int getWidth() throws RemoteException {
        return width;
    }

    /**
     * Get height
     *
     * @return Robot's height
     */
    public int getHeight() throws RemoteException {
        return height;
    }

    /**
     * Get depth
     *
     * @return Robot's depth
     */
    public float getDepth() throws RemoteException {
        return depth;
    }

    /**
     * Get angle
     *
     * @return Robot's angle
     */
    public int getAngle() throws RemoteException {
        return angle;
    }

    /**
     * Get GetGradient
     *
     * @return Robot's gradient
     */
    public Gradient getGradient() throws RemoteException {
        return gradient;
    }

    /**
     * Get Pressure
     *
     * @return Robot's pressure
     */
    public float getPressure() throws RemoteException {
        return pressure;
    }

    /**
     * Get GetTime
     *
     * @return Game's last time
     */
    public int getTime() throws RemoteException {
        return time;
    }

    /**
     * Get parent thread
     *
     * @return Thread
     */
    public RobotThread getThread() throws RemoteException {
        return thread;
    }

   /**
    * Get Ready
    *
    * @return Ready flag
    */
   public boolean getReady() throws RemoteException {
       return ready;
   }


    /**
     * Set name
     *
     * @param rname Robot's name
     */
    public void setRName(String rname) throws RemoteException {
        name = rname;
    }

    /**
     * Set team
     *
     * @param rteam Robot's team
     */
    public void setTeam(Team rteam) throws RemoteException {
        team = rteam;
    }

    /**
     * Set width
     *
     * @param rwidth Robot's width
     */
    public void setWidth(int rwidth) throws RemoteException {
        width = rwidth;
    }

    /**
     * Set height
     *
     * @param rheight Robot's height
     */
    public void setHeight(int rheight) throws RemoteException {
        height = rheight;
    }

    /**
     * Set depth
     *
     * @param rdepth Robot's depth
     */
    public void setDepth(int rdepth) throws RemoteException {
        depth = rdepth;
    }

    /**
     * Set angle
     *
     * @param rangle Robot's angle
     */
    public void setAngle(int rangle) throws RemoteException {
        angle = rangle;
    }

    /**
     * Set Pressure
     *
     * @param rpressure Robot's pressure
     */
    public void setPressure(float rpressure) throws RemoteException {
        pressure = rpressure;
    }

    /**
     * set GetTime
     *
     * @param rtime Game's last time
     */
    public void setTime(int rtime) throws RemoteException {
        time = rtime;
    }

    /**
     * Set parent thread
     *
     * @param _thread Thread
     */
    public void setThread(RobotThread _thread) throws RemoteException{
        thread = _thread;
    }

    /**
     * Set command to be executed
     *
     * @param command Command string
     * @return True if succeeded
     */
    public boolean setCommand(String command) throws RemoteException {
        if(thread != null) {
            return thread.setCommand(command);
        }
        return false;
    }

    /**
     * Fetch Gradient
     *
     * @return Robot's gradient
     */
    public Gradient fetchGradient() throws RemoteException {
        Gradient rgradient = (Gradient) gradient.clone();
        gradient.clear();
        return rgradient;

    }

    /**
     * Fetch Pressure
     *
     * @return Robot's pressure
     */
    public float fetchPressure() throws RemoteException {
        float rpressure = pressure;
        return rpressure;

    }

    /**
     * Set GetGradient / Flush
     *
     */
    public void setGradient() throws RemoteException {
        gradient.flush();
    }

   /**
    * Set Ready
    *
    * @param flag Ready
    */
   public void setReady(boolean flag) throws RemoteException {
       ready = flag;
   }

    /**
     * Prospect
     * todo XXX ???????????
     *
     */
    public void prospect() throws RemoteException {
    }


}
